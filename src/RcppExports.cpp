// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// hubviz_cpp
Rcpp::List hubviz_cpp(arma::mat data, const int nsample, const int nitem, const int ndim, const int niter, const int nburn, const int nthin, const int nprint, const double jump_theta, const double jump_w, const double pr_mean_theta, const double pr_sd_theta, const double pr_mean_w, const double prior_a, const double prior_b, bool option, const int cores);
RcppExport SEXP _hubviz_hubviz_cpp(SEXP dataSEXP, SEXP nsampleSEXP, SEXP nitemSEXP, SEXP ndimSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP nthinSEXP, SEXP nprintSEXP, SEXP jump_thetaSEXP, SEXP jump_wSEXP, SEXP pr_mean_thetaSEXP, SEXP pr_sd_thetaSEXP, SEXP pr_mean_wSEXP, SEXP prior_aSEXP, SEXP prior_bSEXP, SEXP optionSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< const int >::type nitem(nitemSEXP);
    Rcpp::traits::input_parameter< const int >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< const int >::type nthin(nthinSEXP);
    Rcpp::traits::input_parameter< const int >::type nprint(nprintSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_theta(jump_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type jump_w(jump_wSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_theta(pr_mean_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_sd_theta(pr_sd_thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type pr_mean_w(pr_mean_wSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_a(prior_aSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_b(prior_bSEXP);
    Rcpp::traits::input_parameter< bool >::type option(optionSEXP);
    Rcpp::traits::input_parameter< const int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(hubviz_cpp(data, nsample, nitem, ndim, niter, nburn, nthin, nprint, jump_theta, jump_w, pr_mean_theta, pr_sd_theta, pr_mean_w, prior_a, prior_b, option, cores));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hubviz_hubviz_cpp", (DL_FUNC) &_hubviz_hubviz_cpp, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_hubviz(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
